name: Build and Release

on:
  push:
    branches: ["main", "v*"]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: rustream

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: rustream-linux
            asset_name: rustream-linux-amd64
          - os: windows-latest
            artifact_name: rustream-windows.exe
            asset_name: rustream-windows-amd64.exe
          - os: macos-latest
            artifact_name: rustream-macos
            asset_name: rustream-macos-amd64
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libssl-dev \
            pkg-config \
            libx11-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxcb-randr0-dev \
            libxcb-shm0-dev \
            libgtk-3-dev \
            libglib2.0-dev \
            libpango1.0-dev \
            libcairo2-dev

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Fetch dependencies
      #   run: |
      #     cargo fetch
      #     cargo check --all-features

      # - name: Run tests
      #   run: cargo test --verbose

      - name: Build Release Binary
        shell: bash
        run: |
            if [ "${{ runner.os }}" == "Windows" ]; then
              export RUSTFLAGS="-A warnings"
              cargo build --release
            else
              RUSTFLAGS="-A warnings" cargo build --release
            fi

      - name: Rename binary
        if: github.ref == 'refs/heads/main'
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/release/${{ env.BINARY_NAME }}.exe ${{ matrix.artifact_name }}
          else
            cp target/release/${{ env.BINARY_NAME }} ${{ matrix.artifact_name }}
          fi

      - name: Upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tag comparison

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $tag"

      - name: Get current commit hash
        id: get_commit
        run: |
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "short_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Check if tag exists for current commit
        id: check_tag
        run: |
          current_commit=$(git rev-parse HEAD)
          latest_tag="${{ steps.get_tag.outputs.latest_tag }}"
          
          if [ "$latest_tag" != "v0.0.0" ]; then
            tag_commit=$(git rev-list -n 1 "$latest_tag" 2>/dev/null || echo "")
            if [ "$current_commit" = "$tag_commit" ]; then
              echo "should_release=false" >> $GITHUB_OUTPUT
              echo "Current commit already has tag $latest_tag"
            else
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "Current commit needs new release"
            fi
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "No previous tags found, creating first release"
          fi

      - name: Calculate next version
        id: next_version
        if: steps.check_tag.outputs.should_release == 'true'
        run: |
          current_tag="${{ steps.get_tag.outputs.latest_tag }}"
          current_tag="${current_tag#v}"
          IFS='.' read -ra PARTS <<< "$current_tag"
          major=${PARTS[0]:-0}
          minor=${PARTS[1]:-0}
          patch=${PARTS[2]:-0}
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "Next version: v$new_version"

      - name: Download all artifacts
        if: steps.check_tag.outputs.should_release == 'true'
        uses: actions/download-artifact@v4
        with:
          path: dist
  
      - name: List files
        if: steps.check_tag.outputs.should_release == 'true'
        run: |
          ls -R dist/
          echo "Available artifacts:"
          find dist -type f
        
      - name: Create Release
        if: steps.check_tag.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.next_version.outputs.version }}
          name: Release v${{ steps.next_version.outputs.version }}
          files: |
            dist/rustream-linux-amd64/rustream-linux
            dist/rustream-windows-amd64.exe/rustream-windows.exe
            dist/rustream-macos-amd64/rustream-macos
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}